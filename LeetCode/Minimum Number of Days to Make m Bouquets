class Solution:
    def minDays(self, bloomDay: List[int], m: int, k: int) -> int:
        if len(bloomDay) < m*k:
            return -1
        l,r = 1, max(bloomDay)
        while l<r:
            mid = (l+r)//2
            if self.feasible(bloomDay, mid, m, k):
                r = mid
            else:
                l = mid + 1
        return l

    def feasible(self, bloomDay, days, m, k):
        boq, flowers = 0,0
        for bloom in bloomDay:
            if bloom > days:
                flowers = 0
            else:
                boq += (flowers+1)//k
                flowers = (flowers+1)%k
        return boq >= m
